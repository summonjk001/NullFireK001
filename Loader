local 字符 = string.char
local 字节 = string.byte
local 子字符串 = string.sub
local 位运算 = bit32 or bit
local 异或 = 位运算.bxor
local 表连接 = table.concat
local 表插入 = table.insert

local function 解密(加密字符串, 密钥)
    local 结果表 = {}
    for 索引 = 1, #加密字符串 do
        表插入(结果表, 字符(异或(字节(子字符串(加密字符串, 索引, 索引 + 1)), 字节(子字符串(密钥, 1 + (索引 % #密钥), 1 + (索引 % #密钥) + 1))) % 256))
    end
    return 表连接(结果表)
end

local 文本标签 = Instance.new("文本标签", workspace)
while true do
    if (game:IsLoaded() and workspace.CurrentCamera) then
        文本标签:Destroy()
        break
    end
    文本标签.Text = "等待游戏加载..."
    task.wait()
end

local function 获取全局环境()
    return ((typeof(getfenv().getgenv) == "函数") and (typeof(getfenv().getgenv()) == "函数") and getfenv().getgenv()) or _G
end

local function 获取网页内容(链接)
    return game:HttpGet(链接, true)
end

function 获取链接内容(链接)
    local 计数 = 1204 - (658 + 546)
    local 临时变量
    local 成功
    local 结果
    while true do
        if (计数 == 1) then
            if (not 成功 or (结果:gsub("\n", ""):gsub("\t", ""):gsub("\r", ""):gsub(" ", "") == "")) then
                return 获取链接内容(链接)
            else
                return 结果
            end
            break
        end
        if (计数 == 0) then
            local 内部计数 = 0
            while true do
                if (内部计数 == 0) then
                    临时变量 = nil
                    成功, 结果 = pcall(获取网页内容, 链接)
                    内部计数 = 1252 - (721 + 530)
                end
                if (1 == 内部计数) then
                    计数 = 2 - 1
                    break
                end
            end
        end
    end
end

function 加载链接内容(链接, ...)
    local 代码 = 获取链接内容(链接)
    local 成功, 函数 = pcall(loadstring, 代码)
    if not 成功 then
        return 加载链接内容(链接, ...)
    end
    return 函数(...)
end

local 全局环境 = 获取全局环境()
local 是否已加载 = 全局环境.FireHubLoaded
全局环境.FireHubLoaded = true
local 通知系统

local function 显示通知(标题, 时间)
    通知系统.Notifications:Notification({
        ["标题"] = 标题,
        ["图标"] = "rbxassetid://0",
        ["时间"] = 时间
    })
end

local function 发送报告(数据)
    local 计数 = 0
    local 请求结果
    while true do
        local 内部计数 = 0
        while true do
            if (内部计数 == 0) then
                if (计数 == 1) then
                    local 内部计数2 = 0
                    local 内部计数3
                    while true do
                        if (内部计数2 == 0) then
                            内部计数3 = 0
                            while true do
                                if (0 == 内部计数3) then
                                    pcall(function()
                                        请求结果 = getfenv().request({
                                            ["链接"] = "https://discord.com/api/webhooks/",
                                            ["方法"] = "POST",
                                            ["内容"] = game:GetService("HTTP服务"):JSONEncode(数据),
                                            ["头部"] = {
                                                ["内容类型"] = "应用程序/json"
                                            }
                                        })
                                    end)
                                    return tostring(请求结果.StatusCode):sub(1, 1) ~= "4"
                                end
                            end
                            break
                        end
                    end
                end
                if (0 == 计数) then
                    if not getfenv().request then
                        return warn("未找到请求函数！请使用支持的脚本执行器。")
                    end
                    请求结果 = {}
                    计数 = 1
                end
                break
            end
        end
    end
end

local 本地玩家 = game:GetService("玩家").LocalPlayer

local function 报告错误(原因, 错误信息)
    local 计数 = 0
    while true do
        if (计数 == 1) then
            发送报告({
                ["用户ID"] = 本地玩家.UserId,
                ["游戏名称"] = 全局环境.GameName or "未知",
                ["任务ID"] = game.JobId,
                ["地点ID"] = game.PlaceId,
                ["玩家数量"] = tostring(#game:GetService("玩家"):GetPlayers() .. "/" .. (全局环境.MaxPlayers or game:GetService("玩家").MaxPlayers)),
                ["设备"] = (game:GetService("用户输入服务").KeyboardEnabled and not game:GetService("用户输入服务").TouchEnabled and "桌面") or "移动设备",
                ["执行器"] = (getfenv().identifyexecutor and getfenv().identifyexecutor()) or "未知",
                ["错误"] = 错误信息,
                ["原因"] = 原因,
                ["类型"] = "Fire~Library"
            })
            break
        end
        if (0 == 计数) then
            全局环境.FireHubLoaded = false
            if 通知系统 then
                显示通知("NullFire 加载失败:\n" .. 原因 .. "\n\n尝试重新启动脚本！", 3 + 7)
            end
            计数 = 1
        end
    end
end

通知系统 = 加载链接内容("https://raw.githubusercontent.com/NullFires/FireHub/main/NullFire.lua")
if not 通知系统 then
    local 计数 = 0
    local 错误标签
    while true do
        if (计数 == 1) then
            报告错误("无法加载 Fire~Library", "Fire~Library 无法初始化！")
            错误标签.Text = "Fire~Library 无法初始化！\n[错误已报告给开发者]"
            计数 = 2
        end
        if (计数 == 2) then
            task.wait(5)
            return 错误标签:Destroy()
        end
        if (0 == 计数) then
            local 内部计数 = 0
            while true do
                if (内部计数 == 0) then
                    错误标签 = Instance.new("文本标签", workspace)
                    错误标签.Text = "Fire~Library 无法初始化！\n\n[正在发送自动错误报告]"
                    内部计数 = 1
                end
                if (内部计数 == 1) then
                    计数 = 1
                    break
                end
            end
        end
    end
end

显示通知("NullFire 初始化开始！\n正在进行一些基本检查和获取数据...")

if 是否已加载 then
    return 显示通知("FireHub 已经加载！")
end

local 玩家数据 = 获取链接内容("https://raw.githubusercontent.com/NullFires/FireHub/main/PlayerData.json")
local 成功, 错误信息 = pcall(function()
    全局环境.个人玩家数据 = 全局环境.个人玩家数据 or game.HttpService:JSONDecode(玩家数据)
end)

if not 成功 then
    return 报告错误("无法加载玩家数据", 错误信息 .. "\n\n数据: " .. 玩家数据)
end

local 个人玩家数据 = 全局环境.个人玩家数据
if 个人玩家数据[tostring(game.Players.LocalPlayer.UserId)] then
    local 玩家信息 = 个人玩家数据[tostring(game.Players.LocalPlayer.UserId)]
    if 玩家信息.Admin then
        显示通知("哦，你是管理员，太棒了！")
    elseif (玩家信息.Ban and 玩家信息.Ban[1]) then
        local 计数 = 0
        local 封禁时间
        local 封禁原因
        local 剩余时间
        while true do
            if (0 == 计数) then
                封禁时间 = 玩家信息.Ban[1]
                封禁原因 = 玩家信息.Ban[2] or "未提供原因"
                计数 = 1
            end
            if (计数 == 1) then
                剩余时间 = 封禁时间 - os.time()
                print(剩余时间, 封禁原因)
                计数 = 2
            end
            if (计数 == 2) then
                if (剩余时间 > 0) then
                    local 计数2 = 0
                    local 内部计数
                    local 天数
                    local 小时数
                    local 分钟数
                    local 秒数
                    while true do
                        if (计数2 == 2) then
                            秒数 = nil
                            while true do
                                if (内部计数 == 2) then
                                    return 显示通知("初始化已停止，因为:\n你被 NullFire 封禁 " .. 天数 .. "天 " .. 小时数 .. "小时 " .. 分钟数 .. "分钟 " .. 秒数 .. "秒，因为:\n" .. 封禁原因, 30)
                                end
                                if (内部计数 == 0) then
                                    天数 = math.floor(剩余时间 / ((53 - 29) * (174 - (4 + 110)) * (644 - (57 + 527))))
                                    小时数 = math.floor((剩余时间 - (天数 * (1451 - (41 + 1386)) * (163 - (17 + 86)) * (41 + 19))) / ((133 - 73) * (173 - 113)))
                                    内部计数 = 1
                                end
                                if (内部计数 == 1) then
                                    分钟数 = math.floor(((剩余时间 - (天数 * (56 - 32) * (103 - 43) * (1262 - (373 + 829)))) - (小时数 * (791 - (476 + 255)) * (199 - 139))) / (35 + 25))
                                    秒数 = ((剩余时间 - (天数 * (43 - 19) * 60 * (49 + 11))) - (小时数 * (9 + 51) * (298 - (64 + 174)))) - (分钟数 * (121 - 61))
                                    内部计数 = 2
                                end
                            end
                            break
                        end
                        if (计数2 == 1) then
                            小时数 = nil
                            分钟数 = nil
                            计数2 = 2
                        end
                        if (计数2 == 0) then
                            内部计数 = 0
                            天数 = nil
                            计数2 = 1
                        end
                    end
                end
                break
            end
        end
    end
end

玩家数据 = game:HttpGet("https://raw.githubusercontent.com/NullFires/FireHub/main/PlayerData.json")
local 玩家数据表
成功, 错误信息 = pcall(function()
    玩家数据表 = game.HttpService:JSONDecode(玩家数据)
end)

if not 成功 then
    报告错误({
        ["类型"] = "无法加载玩家数据",
        ["原因"] = "```\n" .. 错误信息 .. "\n\n数据: " .. 玩家数据 .. "\n```"
    })
end
